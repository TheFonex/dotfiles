+TITLE: Fonex's GNU Emacs Config
#+AUTHOR: Kacper Cieslak (Fonex)
#+DESCRIPTION: Fonex's personal emacs config
#+STARTUP: showeverything
#+OPTIONS: toc:2

* TABLE OF CONTENTS :toc:
- [[#important-programs][IMPORTANT PROGRAMS]]
  - [[#elpaca-package-manager][Elpaca Package Manager]]
  - [[#load-evil-mode][Load Evil Mode]]
  - [[#general-keybindings][General Keybindings]]
- [[#theme][Theme]]
- [[#rainbow-mode][RAINBOW MODE]]
- [[#dashboard][DASHBOARD]]
- [[#projectile][PROJECTILE]]
- [[#functions][FUNCTIONS]]
- [[#comments][COMMENTS]]
- [[#shells-and-terminals][SHELLS AND TERMINALS]]
  - [[#vterm][Vterm]]
  - [[#vterm-toggle][Vterm-Toggle]]
- [[#fonts][FONTS]]
  - [[#setting-the-fontface][Setting the FontFace]]
  - [[#zooming-inout][Zooming In/Out]]
- [[#gui-changes][GUI CHANGES]]
  - [[#disable-menubar-toolbox-scrollbar][Disable Menubar, Toolbox, Scrollbar]]
  - [[#display-line-numbers][Display Line Numbers]]
- [[#diminish][DIMINISH]]
- [[#dired][DIRED]]
- [[#language-support][LANGUAGE SUPPORT]]
- [[#reformatting][REFORMATTING]]
- [[#flycheck][FLYCHECK]]
- [[#markdown-mode][MARKDOWN MODE]]
- [[#yasnippet][YASNIPPET]]
- [[#lsp-bridge][LSP-BRIDGE]]
- [[#org-mode][ORG MODE]]
  - [[#enabling-table-of-contents][Enabling Table of Contents]]
  - [[#enabling-org-bullets][Enabling Org Bullets]]
  - [[#disable-electric-indent][Disable Electric Indent]]
  - [[#better-source-code-block][Better Source Code Block]]
- [[#sudo-edit][SUDO EDIT]]
- [[#which-key][WHICH-KEY]]
- [[#all-the-icons][ALL THE ICONS]]
- [[#ivy-counsel][IVY (Counsel)]]
- [[#buffer-move-functions][Buffer Move Functions]]

* IMPORTANT PROGRAMS
** Elpaca Package Manager

#+begin_src emacs-lisp
    (defvar elpaca-installer-version 0.8)
    (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
    (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
    (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
    (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                  :ref nil :depth 1
                                  :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                                  :build (:not elpaca--activate-package)))
    (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
           (build (expand-file-name "elpaca/" elpaca-builds-directory))
           (order (cdr elpaca-order))
           (default-directory repo))
      (add-to-list 'load-path (if (file-exists-p build) build repo))
      (unless (file-exists-p repo)
        (make-directory repo t)
        (when (< emacs-major-version 28) (require 'subr-x))
        (condition-case-unless-debug err
            (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                      ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                      ,@(when-let* ((depth (plist-get order :depth)))
                                                          (list (format "--depth=%d" depth) "--no-single-branch"))
                                                      ,(plist-get order :repo) ,repo))))
                      ((zerop (call-process "git" nil buffer t "checkout"
                                            (or (plist-get order :ref) "--"))))
                      (emacs (concat invocation-directory invocation-name))
                      ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                            "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                      ((require 'elpaca))
                      ((elpaca-generate-autoloads "elpaca" repo)))
                (progn (message "%s" (buffer-string)) (kill-buffer buffer))
              (error "%s" (with-current-buffer buffer (buffer-string))))
          ((error) (warn "%s" err) (delete-directory repo 'recursive))))
      (unless (require 'elpaca-autoloads nil t)
        (require 'elpaca)
        (elpaca-generate-autoloads "elpaca" repo)
        (load "./elpaca-autoloads")))
    (add-hook 'after-init-hook #'elpaca-process-queues)
    (elpaca `(,@elpaca-order))

  ;; Install a package via the elpaca macro
  ;; See the "recipes" section of the manual for more details.

  ;; (elpaca example-package)

  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable use-package :ensure support for Elpaca.
    (elpaca-use-package-mode)
    (setq elpaca-use-package-by-default t))

  ;;When installing a package used in the init file itself,
  ;;e.g. a package which adds a use-package key word,
  ;;use the :wait recipe keyword to block until that package is installed/configured.
  ;;For example:
  ;;(use-package general :ensure (:wait t) :demand t)
  ;;Turns off elpaca-use-package-mode current declaration
  ;;Note this will cause evaluate the declaration immediately. It is not deferred.
  ;;Useful for configuring built-in emacs features.
  (use-package emacs :ensure nil :config (setq ring-bell-function #'ignore))  
#+end_src

** Load Evil Mode

#+begin_src emacs-lisp

  ;; Expands to: (elpaca evil (use-package evil :demand t))
  (use-package evil
      :init
      (setq evil-want-integration t)
      (setq evil-want-keybinding nil)
      (setq evil-vsplit-window-right t)
      (setq evil-split-window-below t)
      (evil-mode))
  (use-package evil-collection
      :after evil
      :config
      (setq evil-collection-mode-list '(dashboard dired ibuffer))
      (evil-collection-init))
  (use-package evil-tutor)

#+end_src


** General Keybindings

#+begin_src emacs-lisp

  (use-package general
    :config
    (general-evil-setup)
  ;; set up 'SPC' as the global leader key
  (general-create-definer fonex/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC" ;; set leader
    :global-prefix "M-SPC") ;; access leader in insert mode

  (fonex/leader-keys
    "SPC" '(counsel-M-x :wk "Counsel-M-x")
    "." '(find-file : wk "Find file")
    "fc" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "Find emacs config")
    "fr" '(counsel-recentf :wk "Find recent files")
    "TAB TAB" '(evilnc-comment-or-uncomment-lines :wk "Comment lines"))


  (fonex/leader-keys
    "b" '(:ignore t :wk "buffer")
    "bi" '(ibuffer :wk "Ibuffer")
    "bb" '(switch-to-buffer :wk "Switch buffer")
    "bk" '(kill-this-buffer :wk "Kill this buffer")
    "bn" '(next-buffer :wk "Next buffer")
    "bp" '(previous-buffer :wk "Previous buffer")
    "br" '(revert-buffer :wk "Reload buffer"))

  (fonex/leader-keys
    "d" '(:ignore t :wk "Dired")
    "dd" '(dired :wk "Open dired")
    "dj" '(dired-jump :wk "Dired jump to current")
    "dp" '(peep-dired :wk "Peep-dired"))

  (fonex/leader-keys
    "e" '(:ignore t :wk "Evaluate")
    "eb" '(eval-buffer :wk "Evaluate elisp in a buffer")
    "ed" '(eval-defun :wk "Evaluate defun contatining or after point")
    "ee" '(eval-expression :wk "Evaluate an elisp expression")
    "el" '(eval-last-sexp :wk "Evaluate elisp expression before point")
    "er" '(eval-region :wk "Evaluate elisp in a region"))

  (fonex/leader-keys 
    "h" '(:ignore t :wk "Help")
    "hf" '(describe-runction :wk "Describe function")
    "hv" '(describe-variable :wk "Describe variable")
    "hrr" '(reload-init-file :wk "Reload emacs config"))
  (fonex/leader-keys
    "r" '(:ignore t :wk "Reformat")
    "rr" '(format-all-region-or-buffer :wk "Reformat region or buffer"))

  (fonex/leader-keys
    "t" '(:ignore t :wk "Toggle")
    "tt" '(visual-line-mode :wk "Toggle truncated lines")
    "tv" '(vterm-toggle :wk "Toggle vterm"))

  (fonex/leader-keys
    "w" '(:ignore :wk "Windows")
    ;; Window splits
    "wc" '(evil-window-delete :wk "Delete Current Window")
    "wn" '(evil-window-new :wk "Create New Window")
    "ws" '(evil-window-split :wk "Split Window Horizontally")
    "wv" '(evil-window-vsplit :wk "Split Window Vertically")
    ;; Window Motions
    "wh" '(evil-window-left :wk "Go Left")
    "wj" '(evil-window-down :wk "Go Down")
    "wk" '(evil-window-up :wk "Go Up")
    "wl" '(evil-window-right :wk "Go Right")
    ;; Move Windows
    "wH" '(buf-move-left :wk "Move Left")
    "wJ" '(buf-move-down :wk "Move Down")
    "wK" '(buf-move-up :wk "Move Up")
    "wL" '(buf-move-right :wk "Move Right"))

  )
#+end_src

* Theme
#+begin_src emacs-lisp
  (use-package color-theme-sanityinc-tomorrow
    :config
    (color-theme-sanityinc-tomorrow-night)
  )
#+end_src

* RAINBOW MODE
 #+begin_src emacs-lisp
 (use-package rainbow-mode
   :hook org-mode prog-mode)
 #+end_src
 
* DASHBOARD 
#+begin_src emacs-lisp
(use-package dashboard
  :ensure t
  :init
  (setq initial-buffer-choice 'dashboard-open)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "Emacs is More Than an Editor!")
  (setq dashboard-startup-banner 'logo)
  (setq dashboard-center-content nil)
  (setq dashboard-items '((recents . 5)
                          (bookmarks . 5)
                          (projects . 3)
                          (registers . 3)))
  (dashboard-modify-heading-icons `((recents . "file-text")
                                    (bookmarks . "book")))
  :config
  (dashboard-setup-startup-hook))
#+end_src
* PROJECTILE
#+begin_src emacs-lisp
  (use-package projectile
    :config
    (projectile-mode 1))

#+end_src

* FUNCTIONS
function defined for emacs 

#+begin_src emacs-lisp
(defun reload-init-file ()
  (interactive)
  (load-file user-init-file)
  (load-file user-init-file))
#+end_src

* COMMENTS
#+begin_src emacs-lisp
  (use-package evil-nerd-commenter)
#+end_src

* SHELLS AND TERMINALS
#+end_src
** Vterm
#+begin_src emacs-lisp
  (use-package vterm)
  (setq shell-file-name "/bin/zsh"
        vterm-max-scrollback 5000)
#+end_src

** Vterm-Toggle
#+begin_src emacs-lisp
    (use-package vterm-toggle)
  (setq vterm-toggle-fullscreen-p nil)
  (add-to-list 'display-buffer-alist
               '(lambda (buffer-or-name _)
                  (let ((buffer (get-buffer buffer-or-name)))
                    (with-current-buffer buffer
                      (or (equal major-mode 'vterm-mode)
                          (string-prefix-p vterm-buffer-name (buffer-name buffer)))))
                  (display-buffer-reuse-window display-buffer-in-side-window)
                  (side . right) ;; Set the window to open on the right side
                  (slot . 0)     ;; Use the first slot if multiple windows on the side
                  (window-width . 0.3) ;; Adjust width to 30% of the frame
                  (dedicated . t) ;; Optional: Make the window dedicated
                  (reusable-frames . visible)))
    (defun my/kill-vterm-buffer-process ()
  "Kill the process associated with the vterm buffer without confirmation."
  (let ((process (get-buffer-process (current-buffer))))
    (when (and process (eq (process-status process) 'run))
      (set-process-query-on-exit-flag process nil))))

(add-hook 'vterm-mode-hook #'my/kill-vterm-buffer-process)
#+end_src

* FONTS
defining the various fonts that emacs will use
** Setting the FontFace
#+begin_src emacs-lisp

  ;; This sets the default font on all graphical frames created after restarting emacs
  ;; does the same thing as 'set-face-attribute default' above
  (add-to-list 'default-frame-alist '(font . "FiraCode Nerd Font Mono-11"))

  ;; Line spacing adjustment
  ;; (setq-default line-spacing 0.12)


#+end_src
** Zooming In/Out

#+begin_src emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-deacrease)
#+end_src

* GUI CHANGES

** Disable Menubar, Toolbox, Scrollbar
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  ;;(setq inhibit-startup-message t)
  ;;(setq initial-scratch-message nil)
#+end_src

** Display Line Numbers
#+begin_src emacs-lisp
(global-display-line-numbers-mode 1)
(global-visual-line-mode t)
#+end_src
* DIMINISH
#+begin_src emacs-lisp
(use-package diminish)
#+end_src

* DIRED
#+begin_src emcs-lisp
(use-package dired-open
  :config
  (setq dired-open-extensions '(("gif" . "sxiv")
                                ("jpg" . "sxiv")
                                ("png" . "sxiv")
                                ("mkv" . "mpv")
                                ("mp4" . "mpv"))
(use-package peep-dired
  :after dired
  :hook (evil-normalize-keymaps . peep-dired-hook)
  :config
    (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
    (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file)
    (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
    (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file)
)
#+end_src

* LANGUAGE SUPPORT
#+begin_src emacs-lisp
(use-package lua-mode)
#+end_src

* REFORMATTING
#+begin_src emacs-lisp
(use-package format-all
:commands format-all-mode
:hook (prog-mode . format-all-mode))

#+end_src
* FLYCHECK
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :defer t
    :diminish
    :init (global-flycheck-mode))

#+end_src
* MARKDOWN MODE
#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode ("README\\.md\\'" . gfm-mode)
    :init (setq markdown-command "multimarkdown")
    :bind (:map markdown-mode-map
           ("C-c C-e" . markdown-do)))

#+end_src
* YASNIPPET

#+begin_src emacs-lisp
  (use-package yasnippet
    :config
     (yas-global-mode 1))
#+end_src

* LSP-BRIDGE
#+begin_src emacs-lisp

#+end_src
* ORG MODE
** Enabling Table of Contents
#+begin_src emacs-lisp
  (use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Enabling Org Bullets

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Disable Electric Indent
#+begin_src emacs-lisp
(electric-indent-mode -1)
(setq org-edit-src-content-indendation 0)
#+end_src

** Better Source Code Block
#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src
* SUDO EDIT
#+begin_src emacs-lisp
(use-package sudo-edit
  :config
    (fonex/leader-keys
     "fu" '(sudo-edit-find-file :wk "Sudo find file")
     "fU" '(sudo-edit :wk "Sudo edit file")))
#+end_src
* WHICH-KEY
#+begin_src emacs-lisp
  (use-package which-key
    :init
      (which-key-mode 1)
    :config
    (setq which-key-side-window-location 'bottom
          which-key-sort-order #'which-key-key-order-alpha
	  which-key-sort-uppercase-first nil
	  which-key-add-column-padding 1
	  which-key-max-display-columns nil
	  which-key-min-display-lines 6
	  which-key-side-window-slot -10
	  which-key-side-window-max-height 0.25
	  which-key-idle-delay 0.8
	  which-key-max-description-length 25
	  which-key-allow-imprecise-window-fit t
	  which-key-separator " ➡ " ))
#+end_src

* ALL THE ICONS

#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))

  (use-package all-the-icons-dired
    :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))

#+end_src

* IVY (Counsel)
A generic completion mechanism fo emacs.
Counsel, a collection of Ivy-enhanced versions of common emacs commands

#+begin_src emacs-lisp
  (use-package counsel
    :after ivy
    :config (counsel-mode))

  (use-package ivy
    :bind
    ;; ivy-resume resumes the last Ivy-based completion.
    (("C-c C-r" . ivy-resume)
     ("C-x B" . ivy-switch-buffer-other-window))
    :custom
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)
    :config
    (ivy-mode))

  (use-package all-the-icons-ivy-rich
    :ensure t
    :init (all-the-icons-ivy-rich-mode 1))

  (use-package ivy-rich
    :after ivy
    :ensure t
    :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x
    :custom
    (ivy-virtual-abbreviate 'full
     ivy-rich-switch-buffer-align-virtual-buffer t
     ivy-rich-path-style 'abbrev)
    :config
    (ivy-set-display-transformer 'ivy-switch-buffer
                                'ivy-rich-switch-buffer-transformer))

#+end_src

* Buffer Move Functions


#+begin_src emacs-lisp
(require 'windmove)

;;;###autoload
(defun buf-move-up ()
  "Swap the current buffer and the buffer above the split.
If there is no split, ie now window above the current one, an
error is signaled."
;;  "Switches between the current buffer, and the buffer above the
;;  split, if possible."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'up))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No window above this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-down ()
"Swap the current buffer and the buffer under the split.
If there is no split, ie now window under the current one, an
error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'down))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (or (null other-win) 
            (string-match "^ \\*Minibuf" (buffer-name (window-buffer other-win))))
        (error "No window under this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-left ()
"Swap the current buffer and the buffer on the left of the split.
If there is no split, ie now window on the left of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'left))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No left split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-right ()
"Swap the current buffer and the buffer on the right of the split.
If there is no split, ie now window on the right of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'right))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No right split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))


;;; buffer-move.el ends here

#+end_src


